<?xml version="1.0" encoding="UTF-8"?>
<project name="TP_note_medev_lacoustille_poulet" default="rebuild" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
    <description>TP note MEDEV Lacoustille-Poulet.</description>

    <!--Indication des chemins des dépendances JUnit-->
    <path id="junit.platform.libs.classpath">
        <fileset dir="lib/junit-platform/"/>
    </path>
    <path id="junit.engine.jupiter.classpath">
        <fileset dir="lib/jupiter/"/>
    </path>
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
	    <classpath path="lib/jacoco/jacocoant.jar" />
    </taskdef>
    <!--Initialisation des dossiers et vérification des dépendances-->
    <target name="checkDependencies" description="Check if dependencies are satisfied"> 
        <property name="result.dir" location="build" />
        <property name="src.location" location="src"/>
        <property name="classes.location" location="${result.dir}/classes"/>
        <property name="tests.location" location="src"/>
	<property name="documentation.dir" location="build/documentation"/>
	<property name="result.report.dir" location="${result.dir}/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />
	<property name="test.report.dir" location="${result.dir}/testReports" />
	<property name="jar.dir" location="${result.dir}/executable" />
	<mkdir dir="${result.dir}"/>
	<mkdir dir="${documentation.dir}"/>
        <mkdir dir="${classes.location}"/>
	<mkdir dir="${jar.dir}"/>
	<mkdir dir="${test.report.dir}"/>
	<mkdir dir="${result.report.dir}"/>
	<touch file="${result.exec.file}"/>
        <echo message="Source directory is ${src.location}"/>
        <echo message="Classes directory is ${classes.location}"/>
        <condition property="src.available">
            <and>
                <available file="${src.location}" type="dir"/>
                <available file="${classes.location}" type="dir"/>
            </and>
        </condition>
    </target>

    <!--Target principal qui build-->
    <target name="build" description="Build the application" depends="checkDependencies" if="src.available">

        <echo message="Building Application..."/>
        <!--Compilation avec Javac qui compile les sources et les tests-->
        <javac srcdir="src" destdir="${classes.location}" includeAntRuntime="false">
            <classpath refid="junit.engine.jupiter.classpath"/>
        </javac>
        <echo message="Done!"/>
    </target>
    <target name="generatingJar" depends="build">
        <echo message="Generating Executable..."/>
        <!--Génération du fichier .jar et du manifest-->
        <jar basedir="${classes.location}" destfile="build/executable/TP_note_medev_lacoustille_poulet.jar">
            <manifest>
                <attribute name="Main-Class" value="org.centrale.medev.tpnote.Test"/>
            </manifest>
        </jar>
        <echo message="Done!"/>
</target>
	<target name="generatingJavadoc" depends="build">
        <echo message="Generating Javadoc..."/>
        <!--Génération de la documentation Javadoc-->
        <javadoc packagenames="org.centrale.medev.tpnote.*" sourcepath="src/main" destdir="${documentation.dir}" author="true" version="true" use="true" >
            <doctitle><![CDATA[<h1> TP noté MEDEV Lacoustille Poulet </h1>]]></doctitle>
            <bottom><![CDATA[<i>CNTCNC Productions. All Right Reserved. </i>]]></bottom>
            <link offline="true" href="https://docs.oracle.com/javase/8/docs/api/" packagelistLoc="C:\tmp"/>
            <link href="https://docs.oracle.com/javase/8/docs/api/"/>
        </javadoc>
        <echo message="Done!"/>
</target>
	<target name="test" depends="build">
        <echo message="Generating tests..."/>
	<!--Try to wrap JUnit tests with Jacoco-->
	<jacoco:coverage destfile="${result.exec.file}">
        <!--Lancement de JUnit-->
        <junitlauncher>
            <!--Indication des dépendances-->
            <classpath refid="junit.platform.libs.classpath"/>
            <classpath refid="junit.engine.jupiter.classpath"/>
            <classpath>
                <pathelement location="${classes.location}"/>
            </classpath>
            <!--Génération des fichiers résultats de test-->
            <testclasses outputdir="${test.report.dir}">
                <fileset dir="${classes.location}"/>
                <listener type="legacy-brief" sendSysOut="true"/>
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
            </testclasses>
        </junitlauncher>
	</jacoco:coverage>
</target>
	<target name="testReport" depends="test">
        <!--Génération du rapport de tests-->
        <junitreport todir="${test.report.dir}">
            <fileset dir="${test.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${test.report.dir}/html"/>
        </junitreport>
        <echo message="Junit Report done!"/>
	<jacoco:report>

			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="JaCoCo Ant">
				<classfiles>
					<fileset dir="${classes.location}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.location}" />
				</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
	</jacoco:report>
        <!--Génération du fichier de coverage Jacoco-->
        <!--<jacoco:coverage destfile="build/jacoco/jacoco.exec">-->
            <!--Execution des tests-->
			<!--<junit printsummary="yes" haltonfailure="no" failureproperty="isUnitTestFailed" fork="yes" forkmode="once">
                <classpath refid="junit.platform.libs.classpath"/>
                <classpath refid="junit.engine.jupiter.classpath"/>
                <classpath>
                    <pathelement location="${classes.location}"/>
                </classpath>
            </junit>
		</jacoco:coverage>-->
        <!--Génération du rapport du coverage-->
        <!--<jacoco:report>-->

			<!-- Collecte des données de coverage-->
			<!--<executiondata>
				<file file="build/jacoco/jacoco.exec" />
			</executiondata>-->

			<!-- Indication des fichier .class et des fichiers sources-->
			<!--<structure name="JaCoCo Ant Medev">
				<classfiles>
					<fileset dir="build/classes" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="src/main" />
				</sourcefiles>
			</structure>-->

			<!-- On prdoduit un rapport au format html -->
			<!--<html destdir="build/jacoco" />
		</jacoco:report>-->
    </target>
	<target name="rebuild" depends="generatingJar,generatingJavadoc,testReport" />
</project>

    
